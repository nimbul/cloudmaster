# Code Generated by ZenTest v. 4.8.0
#                 classname: asrt / meth =  ratio%
#                       EC2:    0 /   46 =   0.00%

require 'test/unit/testcase'
require 'test/unit' if $0 == __FILE__

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'OriginalAWS'))
require 'OriginalAWS/AWS'
require 'OriginalAWS/EC2'

class TestEC2 < Test::Unit::TestCase
  def setup
    @ec2 = EC2.new
  end

  def test_allocate_address
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
    <AllocateAddressResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>62850b4a-ff80-42c8-9ed1-5dcaafe22615</requestId>
    <publicIp>23.21.157.226</publicIp>
    <domain>standard</domain>
    </AllocateAddressResponse>
    BODY
    prep_query response_object body
    assert_equal '23.21.157.226', @ec2.allocate_address
  end

  def test_associate_address
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<AssociateAddressResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>c84677f2-8439-458c-abcf-0afe31278c4e</requestId>
    <return>true</return>
</AssociateAddressResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.associate_address('i-df3138b9', '23.21.209.37')
  end

  def test_attach_volume
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<AttachVolumeResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>c13c8bce-4977-4118-a1bb-014fe781689f</requestId>
    <volumeId>vol-e5ec3c8b</volumeId>
    <instanceId>i-df3138b9</instanceId>
    <device>/dev/sdh</device>
    <status>attaching</status>
    <attachTime>2012-05-29T17:00:45.043Z</attachTime>
</AttachVolumeResponse>
    BODY
    prep_query body
    assert_equal({:status=>"attaching", :volume_id=>"vol-e5ec3c8b", :instance_id=>"i-df3138b9", :device=>"/dev/sdh"}, @ec2.attach_volume('vol-e5ec3c8b', 'i-df3138b9', '/dev/sdh'))
  end

  def test_authorize_ingress_by_cidr
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<AuthorizeSecurityGroupIngressResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>0d8f2a58-8c43-475b-bf8a-8e264b2f37fb</requestId>
    <return>true</return>
</AuthorizeSecurityGroupIngressResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.authorize_ingress_by_cidr('test', 'tcp', '80')
  end

  def test_authorize_ingress_by_group
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<AuthorizeSecurityGroupIngressResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>6c7d9d1d-12e2-4275-bc9a-ecef2c8f8e21</requestId>
    <return>true</return>
</AuthorizeSecurityGroupIngressResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.authorize_ingress_by_group('test', 'test', '12345')
  end

  def test_confirm_product_instance
    body =<<-BODY
    BODY
    prep_query body
  end

  def test_create_keypair
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<CreateKeyPairResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>171b4b80-2f05-4f3a-9c93-b171506e5f4c</requestId>
    <keyName>test</keyName>
    <keyFingerprint>d4:46:b9:2a:86:c4:b9:7f:0f:02:9d:54:92:88:19:ab:6d:00:65:49</keyFingerprint>
    <keyMaterial>-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAqhJnkyQ8zP+Qtm1EZacxZ33Q5AmRlMpO8XlBRB0w+Gfl4Gh4NFDam/SSaOKd
7XyRT92RyAPzxXEzCiMGI2i35aV4SO35+A96S4K75kfVQ1qD3MTFyuasWiI0f5OPQfGC8wAIk/Z2
qwrKppRHoHSKRZeVHJzY2VQaOuWFLRiCQELA2/7V5j76RyUhb3xM/ydMg9zJrfn0ukIbWehlr/Pm
H5HscyvXrSm6CGKjGBWxyjJ1KJA4jgswk59e/PZv6wtvrNDgb+mqL0h2zRl3EacPvwO05FoZYJOW
eVUN/0qlAV/rCiVnokZnjvEkqFpDyUxSEtM+nxTpcTGMjBqwWEsDVQIDAQABAoIBAQCZX2ukmIN0
Y+0/dx69hZ/aMu6VF8QAKMo0niMrqB+nhRsb21q740aialc221eM+k+ZdLmpZVcLceCTfa5ldGST
ZzwomORavqqNOmL1c0ZyLUjJaXLuXkSELGCnxIzm7UQonJkfxp6R9XN38jT+ENs5k0/Xs+MjauMU
xjPpzTZ5d8FUygA6hihsGUAjeE3yOyMnk5V9IvawOBfiOwnWEGkXXVjtu7Dy+l86uk6MGps8LFKD
vVMIHWtrV1zYzDbdAK9Hr8GHHUtA35Y5yUGFJX82c73XRSr5Ga20ujY4U7VOpuTgIfwhpzNK9pha
SGlWwRmK+PXrGv8oOFIpRkP/E2LpAoGBANJyqlTbKyDqGdwJ0DsabqKMBpbx+ujk+4xqByqPaRWG
clG1RFqWUyoigCR1Cs/sUtngA6IIs3NTRDpSx89pHekaVosLjjBgmJkYGlvYc5GR5cOrvDLEadW1
Bai+e4kJllIDBg0W+ionpK1UqCu2mJQIncaH0194jYmn96tcmiVzAoGBAM7ibJvYIzIfkqe+tVvx
PksP3Vlk58CQXeeXuKLK1pXClSa7JZCNUyTGffj03jxxi3FR0buMhbur4uZt3aWWYhOI5GFwP4Bd
Ucf92sAzHYWgas7F0bRWZ+gNPoQS4M8vsFsZrvwi7dOVmlUAGDKaTU9TmXq9zoK5Re34x2KxjkIX
AoGAKBdKFbJPDA0s8fs4nRnS+8pbMwRUPWvp8/z68oOxjDU5sBEtPWin3T4HVWqqraOiwPjpGEQ6
E31IYSgGAqBO32pyFDkWVGcCix/JXbflhFTcBaPAzZcXZmv+8P+gvyGBbow+6d13uPImcBLRmspF
VOYzUG/tt6FarV+/UfjpMLsCgYBDcbNAdwy6SWqw/s325EWPiON7Qhb/QtEqL98ESyX7eozPLJGJ
d1kUkxT8NS/B+q4fyjGad6wdS2LUBhsM4WKlxanWThaVjVac4RgQMlm8d1h6gijkJosHLlIkEldx
k7VlbZELJ4Pqx0mhzj8VOBJd+v388qXBHg87DjBJ72JWDwKBgQCphvxdZwkA+N7CiuGNGEZizBGT
L/6AcevrPikc62TfhKSPcwVeywsMeTfKlGSOzEh5uVud5+n75EU/niH5llJfH6Q2DDkxkdij4iV7
Y9yUllzeHwz5kOefw75gQDZU5KiEdyKvu/D+dG6O0mO4xKAIcjx6+b1ejjB5bheMrVwrTg==
-----END RSA PRIVATE KEY-----</keyMaterial>
</CreateKeyPairResponse>
    BODY
    response = {:material=>"-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAqhJnkyQ8zP+Qtm1EZacxZ33Q5AmRlMpO8XlBRB0w+Gfl4Gh4NFDam/SSaOKd\n7XyRT92RyAPzxXEzCiMGI2i35aV4SO35+A96S4K75kfVQ1qD3MTFyuasWiI0f5OPQfGC8wAIk/Z2\nqwrKppRHoHSKRZeVHJzY2VQaOuWFLRiCQELA2/7V5j76RyUhb3xM/ydMg9zJrfn0ukIbWehlr/Pm\nH5HscyvXrSm6CGKjGBWxyjJ1KJA4jgswk59e/PZv6wtvrNDgb+mqL0h2zRl3EacPvwO05FoZYJOW\neVUN/0qlAV/rCiVnokZnjvEkqFpDyUxSEtM+nxTpcTGMjBqwWEsDVQIDAQABAoIBAQCZX2ukmIN0\nY+0/dx69hZ/aMu6VF8QAKMo0niMrqB+nhRsb21q740aialc221eM+k+ZdLmpZVcLceCTfa5ldGST\nZzwomORavqqNOmL1c0ZyLUjJaXLuXkSELGCnxIzm7UQonJkfxp6R9XN38jT+ENs5k0/Xs+MjauMU\nxjPpzTZ5d8FUygA6hihsGUAjeE3yOyMnk5V9IvawOBfiOwnWEGkXXVjtu7Dy+l86uk6MGps8LFKD\nvVMIHWtrV1zYzDbdAK9Hr8GHHUtA35Y5yUGFJX82c73XRSr5Ga20ujY4U7VOpuTgIfwhpzNK9pha\nSGlWwRmK+PXrGv8oOFIpRkP/E2LpAoGBANJyqlTbKyDqGdwJ0DsabqKMBpbx+ujk+4xqByqPaRWG\nclG1RFqWUyoigCR1Cs/sUtngA6IIs3NTRDpSx89pHekaVosLjjBgmJkYGlvYc5GR5cOrvDLEadW1\nBai+e4kJllIDBg0W+ionpK1UqCu2mJQIncaH0194jYmn96tcmiVzAoGBAM7ibJvYIzIfkqe+tVvx\nPksP3Vlk58CQXeeXuKLK1pXClSa7JZCNUyTGffj03jxxi3FR0buMhbur4uZt3aWWYhOI5GFwP4Bd\nUcf92sAzHYWgas7F0bRWZ+gNPoQS4M8vsFsZrvwi7dOVmlUAGDKaTU9TmXq9zoK5Re34x2KxjkIX\nAoGAKBdKFbJPDA0s8fs4nRnS+8pbMwRUPWvp8/z68oOxjDU5sBEtPWin3T4HVWqqraOiwPjpGEQ6\nE31IYSgGAqBO32pyFDkWVGcCix/JXbflhFTcBaPAzZcXZmv+8P+gvyGBbow+6d13uPImcBLRmspF\nVOYzUG/tt6FarV+/UfjpMLsCgYBDcbNAdwy6SWqw/s325EWPiON7Qhb/QtEqL98ESyX7eozPLJGJ\nd1kUkxT8NS/B+q4fyjGad6wdS2LUBhsM4WKlxanWThaVjVac4RgQMlm8d1h6gijkJosHLlIkEldx\nk7VlbZELJ4Pqx0mhzj8VOBJd+v388qXBHg87DjBJ72JWDwKBgQCphvxdZwkA+N7CiuGNGEZizBGT\nL/6AcevrPikc62TfhKSPcwVeywsMeTfKlGSOzEh5uVud5+n75EU/niH5llJfH6Q2DDkxkdij4iV7\nY9yUllzeHwz5kOefw75gQDZU5KiEdyKvu/D+dG6O0mO4xKAIcjx6+b1ejjB5bheMrVwrTg==\n-----END RSA PRIVATE KEY-----", :file_name=>"test.pem", :fingerprint=>"d4:46:b9:2a:86:c4:b9:7f:0f:02:9d:54:92:88:19:ab:6d:00:65:49", :name=>"test"} 
    prep_query body
    assert_equal response, @ec2.create_keypair('test')
  end

  def test_create_security_group
    body = <<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<CreateSecurityGroupResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>46c18e5e-b7f5-4b31-b3b1-8a9184c4b725</requestId>
    <return>true</return>
    <groupId>sg-6bb20c03</groupId>
</CreateSecurityGroupResponse>
    BODY
    prep_query body
    assert_equal({:return=>true, :group_id=>"sg-6bb20c03"}, @ec2.create_security_group('test', 'testing'))
  end

  def test_create_snapshot
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<CreateSnapshotResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>9a149cdb-b357-4be2-a1b1-c24c001eee83</requestId>
    <snapshotId>snap-4855fa37</snapshotId>
    <volumeId>vol-2d09d943</volumeId>
    <status>pending</status>
    <startTime>2012-05-29T17:27:18.000Z</startTime>
    <progress/>
    <ownerId>119421858375</ownerId>
    <volumeSize>1</volumeSize>
    <description>test</description>
</CreateSnapshotResponse>
    BODY
    response = {:start_time=>"2012-05-29T17:27:18.000Z", :progress=>"", :status=>"pending", :volume_id=>"vol-2d09d943", :snapshot_id=>"snap-4855fa37"}
    prep_query body
    assert_equal response, @ec2.create_snapshot('vol-2d09d943', 'test')
  end

  def test_create_volume
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<CreateVolumeResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>e0adab1c-dccf-4d9a-aecc-b73b89ee62d4</requestId>
    <volumeId>vol-2d09d943</volumeId>
    <size>1</size>
    <snapshotId/>
    <availabilityZone>us-east-1a</availabilityZone>
    <status>creating</status>
    <createTime>2012-05-29T17:26:10.000Z</createTime>
</CreateVolumeResponse>
    BODY
    response = {:availability_zone=>"us-east-1a", :status=>"creating", :volume_id=>"vol-2d09d943", :size=>"1", :create_time=>"2012-05-29T17:26:10.000Z", :snapshot_id=>""}
    prep_query body
    assert_equal response, @ec2.create_volume('1', 'us-east-1a')
  end

  def test_create_volume_from_snapshot
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<CreateVolumeResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>b665294b-cb45-4ca0-bfc3-fd7c1df09646</requestId>
    <volumeId>vol-3908d857</volumeId>
    <size>10</size>
    <snapshotId>snap-7058f70f</snapshotId>
    <availabilityZone>us-east-1a</availabilityZone>
    <status>creating</status>
    <createTime>2012-05-29T17:24:42.000Z</createTime>
</CreateVolumeResponse>
    BODY
    response = {:availability_zone=>"us-east-1a", :status=>"creating", :volume_id=>"vol-3908d857", :size=>"10", :create_time=>"2012-05-29T17:24:42.000Z", :snapshot_id=>"snap-7058f70f"}
    prep_query body
    assert_equal response, @ec2.create_volume_from_snapshot('snap-7058f70f', 'us-east-1a')
  end

  def test_delete_keypair
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DeleteKeyPairResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>cf1ca558-21fd-4f8d-9292-9de65da2100a</requestId>
    <return>true</return>
</DeleteKeyPairResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.delete_keypair('test')
  end

  def test_delete_security_group
    body =<<-BODY
<?xml version='1.0' encoding='UTF-8'?>
<DeleteSecurityGroupResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>8c2feccf-ac2c-41ee-acf7-1e8d2ef10bff</requestId>
    <return>true</return>
</DeleteSecurityGroupResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.delete_security_group('test')
  end

  def test_delete_snapshot
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DeleteSnapshotResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>f41c2ea5-fdb3-442d-b251-7852a4fee391</requestId>
    <return>true</return>
</DeleteSnapshotResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.delete_snapshot('snap-7058f70f')
  end

  def test_delete_volume
    body =<<-BODY
<?xml version='1.0' encoding='UTF-8'?>
<DeleteVolumeResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>1820c360-9300-462f-87db-d1c4ad6a90d9</requestId>
    <return>true</return>
</DeleteVolumeResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.delete_volume('vol-e5ec3c8b')
  end

  def test_deregister_image
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DeregisterImageResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>dcddf951-12c1-492d-af37-a4bfa8cacf24</requestId>
    <return>true</return>
</DeregisterImageResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.deregister_image('ami-e0e84989')
  end

  def test_describe_addresses
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeAddressesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>4ab26b0b-8e05-404a-9d61-9b98b1a1ef04</requestId>
    <addressesSet>
        <item>
            <publicIp>23.21.209.37</publicIp>
            <domain>standard</domain>
            <instanceId/>
        </item>
        <item>
            <publicIp>184.72.217.123</publicIp>
            <domain>standard</domain>
            <instanceId/>
        </item>
        <item>
            <publicIp>184.73.173.154</publicIp>
            <domain>standard</domain>
            <instanceId/>
        </item>
        <item>
            <publicIp>184.73.218.128</publicIp>
            <domain>standard</domain>
            <instanceId/>
        </item>
        <item>
            <publicIp>184.73.234.245</publicIp>
            <domain>standard</domain>
            <instanceId/>
        </item>
        <item>
            <publicIp>184.73.237.153</publicIp>
            <domain>standard</domain>
            <instanceId>i-a53ddac3</instanceId>
        </item>
    </addressesSet>
</DescribeAddressesResponse>
    BODY
    response = [{:public_ip=>"23.21.209.37", :instance_id=>""}, {:public_ip=>"184.72.217.123", :instance_id=>""}, {:public_ip=>"184.73.173.154", :instance_id=>""}, {:public_ip=>"184.73.218.128", :instance_id=>""}, {:public_ip=>"184.73.234.245", :instance_id=>""}, {:public_ip=>"184.73.237.153", :instance_id=>"i-a53ddac3"}]
    prep_query body
    assert_equal response, @ec2.describe_addresses
  end

  def test_describe_availability_zones
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeAvailabilityZonesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>19f4fbc5-8b94-4488-a4cd-578be71c6f43</requestId>
    <availabilityZoneInfo>
        <item>
            <zoneName>us-east-1a</zoneName>
            <zoneState>available</zoneState>
            <regionName>us-east-1</regionName>
            <messageSet/>
        </item>
        <item>
            <zoneName>us-east-1b</zoneName>
            <zoneState>available</zoneState>
            <regionName>us-east-1</regionName>
            <messageSet/>
        </item>
        <item>
            <zoneName>us-east-1c</zoneName>
            <zoneState>available</zoneState>
            <regionName>us-east-1</regionName>
            <messageSet/>
        </item>
        <item>
            <zoneName>us-east-1d</zoneName>
            <zoneState>available</zoneState>
            <regionName>us-east-1</regionName>
            <messageSet/>
        </item>
        <item>
            <zoneName>us-east-1e</zoneName>
            <zoneState>available</zoneState>
            <regionName>us-east-1</regionName>
            <messageSet/>
        </item>
    </availabilityZoneInfo>
</DescribeAvailabilityZonesResponse>
    BODY
    response = [{:state=>"available", :name=>"us-east-1a"}, {:state=>"available", :name=>"us-east-1b"}, {:state=>"available", :name=>"us-east-1c"}, {:state=>"available", :name=>"us-east-1d"}, {:state=>"available", :name=>"us-east-1e"}]
    prep_query body
    assert_equal response, @ec2.describe_availability_zones
  end

  def test_describe_image_attribute
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeImageAttributeResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>119886fa-5391-45a4-955c-61228fc03edc</requestId>
    <imageId>ami-c8cb6ea1</imageId>
    <launchPermission/>
</DescribeImageAttributeResponse>
    BODY
    response = {:launch_perms_user=>[], :launch_perms_group=>[], :id=>"ami-c8cb6ea1"} 
    prep_query body
    assert_equal response, @ec2.describe_image_attribute('ami-c8cb6ea1', 'launchPermission')
  end

  def test_describe_images
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeImagesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>f26b402e-06cd-441c-ba01-98ffc6ba98c5</requestId>
    <imagesSet>
        <item>
            <imageId>ami-d7eb25be</imageId>
            <imageLocation>771521388140/x86-64_centos_5.5_ebs_nimbul.20111031.1</imageLocation>
            <imageState>available</imageState>
            <imageOwnerId>771521388140</imageOwnerId>
            <isPublic>false</isPublic>
            <architecture>x86_64</architecture>
            <imageType>machine</imageType>
            <kernelId>aki-b51cf9dc</kernelId>
            <ramdiskId>ari-b31cf9da</ramdiskId>
            <name>x86-64_centos_5.5_ebs_nimbul.20111031.1</name>
            <description>Autogenerated EBS backed AMI named x86-64_centos_5.5_ebs_nimbul.20111031.1 from instance i-7e9f8f1e by EBSify @ 2011-10-31T13:06:24-04:00</description>
            <rootDeviceType>ebs</rootDeviceType>
            <rootDeviceName>/dev/sda1</rootDeviceName>
            <blockDeviceMapping>
                <item>
                    <deviceName>/dev/sda1</deviceName>
                    <ebs>
                        <snapshotId>snap-176aa675</snapshotId>
                        <volumeSize>10</volumeSize>
                        <deleteOnTermination>true</deleteOnTermination>
                    </ebs>
                </item>
            </blockDeviceMapping>
            <virtualizationType>paravirtual</virtualizationType>
            <hypervisor>xen</hypervisor>
        </item>
    </imagesSet>
</DescribeImagesResponse>
    BODY
    prep_query body
    assert_equal([{:root_device_name=>"/dev/sda1", :type=>"machine", :is_public=>false, :owner_id=>"771521388140", :block_device_mapping=>[{:no_device=>false, :ebs=>{:volume_size=>"10", :delete_on_termination=>true, :snapshot_id=>"snap-176aa675"}, :device_name=>"/dev/sda1"}], :description=>"Autogenerated EBS backed AMI named x86-64_centos_5.5_ebs_nimbul.20111031.1 from instance i-7e9f8f1e by EBSify @ 2011-10-31T13:06:24-04:00", :kernel_id=>"aki-b51cf9dc", :state=>"available", :ramdisk_id=>"ari-b31cf9da", :architecture=>"x86_64", :name=>"x86-64_centos_5.5_ebs_nimbul.20111031.1", :root_device_type=>"ebs", :id=>"ami-d7eb25be", :location=>"771521388140/x86-64_centos_5.5_ebs_nimbul.20111031.1"}], @ec2.describe_images(:image_ids => 'ami-d7eb25be'))
  end

  def test_describe_instances
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeInstancesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>3777fc50-98ac-4a9e-b24d-0b9811729887</requestId>
    <reservationSet>
        <item>
            <reservationId>r-d7f6c7b5</reservationId>
            <ownerId>119421858375</ownerId>
            <groupSet>
                <item>
                    <groupId>sg-8b01e4e2</groupId>
                    <groupName>default</groupName>
                </item>
            </groupSet>
            <instancesSet>
                <item>
                    <instanceId>i-df3138b9</instanceId>
                    <imageId>ami-d7eb25be</imageId>
                    <instanceState>
                        <code>16</code>
                        <name>running</name>
                    </instanceState>
                    <privateDnsName>ip-10-122-233-39.ec2.internal</privateDnsName>
                    <dnsName>ec2-23-22-9-208.compute-1.amazonaws.com</dnsName>
                    <reason/>
                    <keyName>nytd.clienttech.dev</keyName>
                    <amiLaunchIndex>0</amiLaunchIndex>
                    <productCodes/>
                    <instanceType>t1.micro</instanceType>
                    <launchTime>2012-05-29T14:42:16.000Z</launchTime>
                    <placement>
                        <availabilityZone>us-east-1a</availabilityZone>
                        <groupName/>
                        <tenancy>default</tenancy>
                    </placement>
                    <kernelId>aki-b51cf9dc</kernelId>
                    <ramdiskId>ari-b31cf9da</ramdiskId>
                    <monitoring>
                        <state>disabled</state>
                    </monitoring>
                    <privateIpAddress>10.122.233.39</privateIpAddress>
                    <ipAddress>23.22.9.208</ipAddress>
                    <groupSet>
                        <item>
                            <groupId>sg-8b01e4e2</groupId>
                            <groupName>default</groupName>
                        </item>
                    </groupSet>
                    <architecture>x86_64</architecture>
                    <rootDeviceType>ebs</rootDeviceType>
                    <rootDeviceName>/dev/sda1</rootDeviceName>
                    <blockDeviceMapping>
                        <item>
                            <deviceName>/dev/sda1</deviceName>
                            <ebs>
                                <volumeId>vol-134f9e7d</volumeId>
                                <status>attached</status>
                                <attachTime>2012-05-29T14:42:45.000Z</attachTime>
                                <deleteOnTermination>true</deleteOnTermination>
                            </ebs>
                        </item>
                    </blockDeviceMapping>
                    <virtualizationType>paravirtual</virtualizationType>
                    <clientToken/>
                    <hypervisor>xen</hypervisor>
                </item>
            </instancesSet>
        </item>
        <item>
            <reservationId>r-cffdccad</reservationId>
            <ownerId>119421858375</ownerId>
            <groupSet>
                <item>
                    <groupId>sg-8b01e4e2</groupId>
                    <groupName>default</groupName>
                </item>
            </groupSet>
            <instancesSet>
                <item>
                    <instanceId>i-07363f61</instanceId>
                    <imageId>ami-d7eb25be</imageId>
                    <instanceState>
                        <code>16</code>
                        <name>running</name>
                    </instanceState>
                    <privateDnsName>domU-12-31-38-01-B0-0D.compute-1.internal</privateDnsName>
                    <dnsName>ec2-107-20-18-67.compute-1.amazonaws.com</dnsName>
                    <reason/>
                    <keyName>nytd.clienttech.dev</keyName>
                    <amiLaunchIndex>0</amiLaunchIndex>
                    <productCodes/>
                    <instanceType>t1.micro</instanceType>
                    <launchTime>2012-05-29T14:40:11.000Z</launchTime>
                    <placement>
                        <availabilityZone>us-east-1a</availabilityZone>
                        <groupName/>
                        <tenancy>default</tenancy>
                    </placement>
                    <kernelId>aki-b51cf9dc</kernelId>
                    <ramdiskId>ari-b31cf9da</ramdiskId>
                    <monitoring>
                        <state>disabled</state>
                    </monitoring>
                    <privateIpAddress>10.253.183.251</privateIpAddress>
                    <ipAddress>107.20.18.67</ipAddress>
                    <groupSet>
                        <item>
                            <groupId>sg-8b01e4e2</groupId>
                            <groupName>default</groupName>
                        </item>
                    </groupSet>
                    <architecture>x86_64</architecture>
                    <rootDeviceType>ebs</rootDeviceType>
                    <rootDeviceName>/dev/sda1</rootDeviceName>
                    <blockDeviceMapping>
                        <item>
                            <deviceName>/dev/sda1</deviceName>
                            <ebs>
                                <volumeId>vol-8b73a2e5</volumeId>
                                <status>attached</status>
                                <attachTime>2012-05-29T14:40:37.000Z</attachTime>
                                <deleteOnTermination>true</deleteOnTermination>
                            </ebs>
                        </item>
                    </blockDeviceMapping>
                    <virtualizationType>paravirtual</virtualizationType>
                    <clientToken/>
                    <hypervisor>xen</hypervisor>
                </item>
            </instancesSet>
        </item>
    </reservationSet>
</DescribeInstancesResponse>
    BODY
    response = [{:reservation_id=>"r-d7f6c7b5", :groups=>["sg-8b01e4e2", "sg-8b01e4e2"], :owner_id=>"119421858375", :instances=>[{:root_device_name=>"/dev/sda1", :type=>"t1.micro", :product_codes=>[], :index=>"0", :launch_time=>"2012-05-29T14:42:16.000Z", :private_ip=>"10.122.233.39", :image_id=>"ami-d7eb25be", :kernel_id=>"aki-b51cf9dc", :reason=>"", :public_ip=>"23.22.9.208", :private_dns=>"ip-10-122-233-39.ec2.internal", :state=>"running", :ramdisk_id=>"ari-b31cf9da", :architecture=>"x86_64", :public_dns=>"ec2-23-22-9-208.compute-1.amazonaws.com", :monitoring=>"disabled", :root_device_type=>"ebs", :zone=>"us-east-1a", :key_name=>"nytd.clienttech.dev", :id=>"i-df3138b9"}]}, {:reservation_id=>"r-cffdccad", :groups=>["sg-8b01e4e2", "sg-8b01e4e2"], :owner_id=>"119421858375", :instances=>[{:root_device_name=>"/dev/sda1", :type=>"t1.micro", :product_codes=>[], :index=>"0", :launch_time=>"2012-05-29T14:40:11.000Z", :private_ip=>"10.253.183.251", :image_id=>"ami-d7eb25be", :kernel_id=>"aki-b51cf9dc", :reason=>"", :public_ip=>"107.20.18.67", :private_dns=>"domU-12-31-38-01-B0-0D.compute-1.internal", :state=>"running", :ramdisk_id=>"ari-b31cf9da", :architecture=>"x86_64", :public_dns=>"ec2-107-20-18-67.compute-1.amazonaws.com", :monitoring=>"disabled", :root_device_type=>"ebs", :zone=>"us-east-1a", :key_name=>"nytd.clienttech.dev", :id=>"i-07363f61"}]}]
    prep_query body
    assert_equal response, @ec2.describe_instances('i-df3138b9', 'i-07363f61')
  end

  def test_describe_keypairs
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeKeyPairsResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>0d88c556-9086-47c4-93b3-9528cd66820f</requestId>
    <keySet>
        <item>
            <keyName>nytd.clienttech.dev</keyName>
            <keyFingerprint>3b:92:e6:1e:72:08:c2:08:34:2c:b3:f3:ae:98:5f:33:b3:29:d0:07</keyFingerprint>
        </item>
        <item>
            <keyName>client_tech_key</keyName>
            <keyFingerprint>4e:e1:f4:3e:d5:f8:c0:34:a8:aa:8e:8a:5a:6b:78:b2:e3:51:26:75</keyFingerprint>
        </item>
        <item>
            <keyName>flock_development</keyName>
            <keyFingerprint>6d:de:c8:b1:99:8d:86:09:d2:fc:39:22:94:c1:c8:5b:63:91:a8:39</keyFingerprint>
        </item>
        <item>
            <keyName>vadimj_home_dev</keyName>
            <keyFingerprint>e4:60:7e:5b:b9:7c:b9:d4:35:89:32:5c:bf:0b:2d:31:81:04:fa:ef</keyFingerprint>
        </item>
        <item>
            <keyName>testing_chris_utz</keyName>
            <keyFingerprint>bf:de:30:1a:4b:80:e4:a4:1e:82:b1:cc:b9:72:82:a7:e0:99:c5:3f</keyFingerprint>
        </item>
    </keySet>
</DescribeKeyPairsResponse>
    BODY
    response = [{:fingerprint=>"3b:92:e6:1e:72:08:c2:08:34:2c:b3:f3:ae:98:5f:33:b3:29:d0:07", :name=>"nytd.clienttech.dev"}, {:fingerprint=>"4e:e1:f4:3e:d5:f8:c0:34:a8:aa:8e:8a:5a:6b:78:b2:e3:51:26:75", :name=>"client_tech_key"}, {:fingerprint=>"6d:de:c8:b1:99:8d:86:09:d2:fc:39:22:94:c1:c8:5b:63:91:a8:39", :name=>"flock_development"}, {:fingerprint=>"e4:60:7e:5b:b9:7c:b9:d4:35:89:32:5c:bf:0b:2d:31:81:04:fa:ef", :name=>"vadimj_home_dev"}, {:fingerprint=>"bf:de:30:1a:4b:80:e4:a4:1e:82:b1:cc:b9:72:82:a7:e0:99:c5:3f", :name=>"testing_chris_utz"}]
    prep_query body
    assert_equal response, @ec2.describe_keypairs
  end

  def test_describe_regions
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeReservedInstancesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>5507d131-422f-4cdc-b984-7039d09d34c3</requestId>
    <reservedInstancesSet>
        <item>
            <reservedInstancesId>4357912c-dede-44d5-9d7e-e363736927dd</reservedInstancesId>
            <instanceType>m1.small</instanceType>
            <availabilityZone>us-east-1a</availabilityZone>
            <start>2009-09-22T18:54:10.177Z</start>
            <duration>94608000</duration>
            <fixedPrice>350.0</fixedPrice>
            <usagePrice>0.03</usagePrice>
            <instanceCount>12</instanceCount>
            <productDescription>Linux/UNIX</productDescription>
            <state>active</state>
            <instanceTenancy>default</instanceTenancy>
            <currencyCode>USD</currencyCode>
        </item>
        <item>
            <reservedInstancesId>b847fa93-b2bb-4e3b-9ffe-5267bc29e5e8</reservedInstancesId>
            <instanceType>m1.small</instanceType>
            <availabilityZone>us-east-1a</availabilityZone>
            <start>2009-12-22T16:30:40.975Z</start>
            <duration>94608000</duration>
            <fixedPrice>350.0</fixedPrice>
            <usagePrice>0.03</usagePrice>
            <instanceCount>8</instanceCount>
            <productDescription>Linux/UNIX</productDescription>
            <state>active</state>
            <instanceTenancy>default</instanceTenancy>
            <currencyCode>USD</currencyCode>
        </item>
    </reservedInstancesSet>
</DescribeReservedInstancesResponse>
    BODY
    prep_query body
    assert_equal([{:fixed_price=>"350.0", :description=>"Linux/UNIX", :count=>"12", :usage_price=>"0.03", :state=>"active", :start=>"2009-09-22T18:54:10.177Z", :reserved_instances_id=>"4357912c-dede-44d5-9d7e-e363736927dd", :instance_type=>"m1.small", :zone=>"us-east-1a", :duration=>"94608000"}, {:fixed_price=>"350.0", :description=>"Linux/UNIX", :count=>"8", :usage_price=>"0.03", :state=>"active", :start=>"2009-12-22T16:30:40.975Z", :reserved_instances_id=>"b847fa93-b2bb-4e3b-9ffe-5267bc29e5e8", :instance_type=>"m1.small", :zone=>"us-east-1a", :duration=>"94608000"}],
                 @ec2.describe_reserved_instances)
  end

  def test_describe_reserved_instances
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeReservedInstancesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>72fcf3a0-a0d6-431b-b3ba-00020b483b9e</requestId>
    <reservedInstancesSet>
        <item>
            <reservedInstancesId>4357912c-dede-44d5-9d7e-e363736927dd</reservedInstancesId>
            <instanceType>m1.small</instanceType>
            <availabilityZone>us-east-1a</availabilityZone>
            <start>2009-09-22T18:54:10.177Z</start>
            <duration>94608000</duration>
            <fixedPrice>350.0</fixedPrice>
            <usagePrice>0.03</usagePrice>
            <instanceCount>12</instanceCount>
            <productDescription>Linux/UNIX</productDescription>
            <state>active</state>
            <instanceTenancy>default</instanceTenancy>
            <currencyCode>USD</currencyCode>
        </item>
        <item>
            <reservedInstancesId>b847fa93-b2bb-4e3b-9ffe-5267bc29e5e8</reservedInstancesId>
            <instanceType>m1.small</instanceType>
            <availabilityZone>us-east-1a</availabilityZone>
            <start>2009-12-22T16:30:40.975Z</start>
            <duration>94608000</duration>
            <fixedPrice>350.0</fixedPrice>
            <usagePrice>0.03</usagePrice>
            <instanceCount>8</instanceCount>
            <productDescription>Linux/UNIX</productDescription>
            <state>active</state>
            <instanceTenancy>default</instanceTenancy>
            <currencyCode>USD</currencyCode>
        </item>
    </reservedInstancesSet>
</DescribeReservedInstancesResponse>
    BODY
    response = [{:fixed_price=>"350.0", :description=>"Linux/UNIX", :count=>"12", :usage_price=>"0.03", :state=>"active", :start=>"2009-09-22T18:54:10.177Z", :reserved_instances_id=>"4357912c-dede-44d5-9d7e-e363736927dd", :instance_type=>"m1.small", :zone=>"us-east-1a", :duration=>"94608000"}, {:fixed_price=>"350.0", :description=>"Linux/UNIX", :count=>"8", :usage_price=>"0.03", :state=>"active", :start=>"2009-12-22T16:30:40.975Z", :reserved_instances_id=>"b847fa93-b2bb-4e3b-9ffe-5267bc29e5e8", :instance_type=>"m1.small", :zone=>"us-east-1a", :duration=>"94608000"}]
    prep_query body
    assert_equal response, @ec2.describe_reserved_instances
  end

  def test_describe_security_groups
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeSecurityGroupsResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>b719fc42-155f-47ed-8470-bd87c8529d31</requestId>
    <securityGroupInfo>
        <item>
            <ownerId>119421858375</ownerId>
            <groupId>sg-8b01e4e2</groupId>
            <groupName>default</groupName>
            <groupDescription>default group</groupDescription>
            <ipPermissions>
                <item>
                    <ipProtocol>icmp</ipProtocol>
                    <fromPort>-1</fromPort>
                    <toPort>-1</toPort>
                    <groups>
                        <item>
                            <userId>119421858375</userId>
                            <groupId>sg-8b01e4e2</groupId>
                            <groupName>default</groupName>
                        </item>
                    </groups>
                    <ipRanges/>
                </item>
                <item>
                    <ipProtocol>tcp</ipProtocol>
                    <fromPort>0</fromPort>
                    <toPort>65535</toPort>
                    <groups>
                        <item>
                            <userId>119421858375</userId>
                            <groupId>sg-8b01e4e2</groupId>
                            <groupName>default</groupName>
                        </item>
                    </groups>
                    <ipRanges/>
                </item>
                <item>
                    <ipProtocol>udp</ipProtocol>
                    <fromPort>0</fromPort>
                    <toPort>65535</toPort>
                    <groups>
                        <item>
                            <userId>119421858375</userId>
                            <groupId>sg-8b01e4e2</groupId>
                            <groupName>default</groupName>
                        </item>
                    </groups>
                    <ipRanges/>
                </item>
                <item>
                    <ipProtocol>tcp</ipProtocol>
                    <fromPort>22</fromPort>
                    <toPort>22</toPort>
                    <groups/>
                    <ipRanges>
                        <item>
                            <cidrIp>170.149.0.0/16</cidrIp>
                        </item>
                        <item>
                            <cidrIp>66.171.162.143/32</cidrIp>
                        </item>
                    </ipRanges>
                </item>
            </ipPermissions>
            <ipPermissionsEgress/>
        </item>
    </securityGroupInfo>
</DescribeSecurityGroupsResponse>
    BODY
    prep_query body
    response = [{:owner_id=>"119421858375", :group_id=>"sg-8b01e4e2", :description=>"default group", :name=>"default", :grants=>[{:groups=>[{:user_id=>"119421858375", :name=>"default"}], :from_port=>"-1", :protocol=>"icmp", :to_port=>"-1"}, {:groups=>[{:user_id=>"119421858375", :name=>"default"}], :from_port=>"0", :protocol=>"tcp", :to_port=>"65535"}, {:groups=>[{:user_id=>"119421858375", :name=>"default"}], :from_port=>"0", :protocol=>"udp", :to_port=>"65535"}, {:ip_range=>["170.149.0.0/16", "66.171.162.143/32"], :from_port=>"22", :protocol=>"tcp", :to_port=>"22"}]}]
    assert_equal response, @ec2.describe_security_groups('default')
  end

  def test_describe_snapshot_attribute
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeSnapshotsResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>fc8feef8-57fd-4491-bc6c-edf0e052ab07</requestId>
    <snapshotSet>
        <item>
            <snapshotId>snap-fe887681</snapshotId>
            <volumeId>vol-dba164b5</volumeId>
            <status>completed</status>
            <startTime>2012-05-25T00:43:24.000Z</startTime>
            <progress>100%</progress>
            <ownerId>556782317223</ownerId>
            <volumeSize>1</volumeSize>
            <description>pvlinux-centos-5.6-x86_1.0.1.90_120524_202631</description>
        </item>
    </snapshotSet>
</DescribeSnapshotsResponse>
    BODY
    prep_query body
    assert_equal([{:start_time=>"2012-05-25T00:43:24.000Z", :owner_id=>"556782317223", :progress=>"100%", :status=>"completed", :description=>"pvlinux-centos-5.6-x86_1.0.1.90_120524_202631", :volume_id=>"vol-dba164b5", :snapshot_id=>"snap-fe887681"}], @ec2.describe_snapshots('snap-fe887681'))
  end

  def test_describe_snapshots
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeSnapshotsResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>67206797-6437-45a7-aa53-5f3933c7ac8e</requestId>
    <snapshotSet>
        <item>
            <snapshotId>snap-517b492d</snapshotId>
            <volumeId>vol-2a504945</volumeId>
            <status>completed</status>
            <startTime>2012-05-18T07:54:53.000Z</startTime>
            <progress>100%</progress>
            <ownerId>556782317223</ownerId>
            <volumeSize>1</volumeSize>
            <description>pvlinux-redhat-5.5-x86_1.0.1.88_120518_032402</description>
        </item>
    </snapshotSet>
</DescribeSnapshotsResponse>
    BODY
    response = [{:start_time=>"2012-05-18T07:54:53.000Z", :owner_id=>"556782317223", :progress=>"100%", :status=>"completed", :description=>"pvlinux-redhat-5.5-x86_1.0.1.88_120518_032402", :volume_id=>"vol-2a504945", :snapshot_id=>"snap-517b492d"}] 
    prep_query body
    assert_equal response, @ec2.describe_snapshots('snap-517b492d')
  end

  def test_describe_volumes
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DescribeVolumesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>0db102cd-178e-47c1-92f3-c539878a6dcd</requestId>
    <volumeSet>
        <item>
            <volumeId>vol-80753ae9</volumeId>
            <size>10</size>
            <snapshotId>snap-60ef2409</snapshotId>
            <availabilityZone>us-east-1b</availabilityZone>
            <status>available</status>
            <createTime>2010-08-20T19:11:12.000Z</createTime>
            <attachmentSet/>
        </item>
        <item>
            <volumeId>vol-3cd3be55</volumeId>
            <size>10</size>
            <snapshotId>snap-4437822c</snapshotId>
            <availabilityZone>us-east-1b</availabilityZone>
            <status>available</status>
            <createTime>2010-07-15T00:57:45.000Z</createTime>
            <attachmentSet/>
        </item>
    </volumeSet>
</DescribeVolumesResponse>
    BODY
    prep_query body
    assert_equal([{:availability_zone=>"us-east-1b", :attachment_set=>[], :status=>"available", :volume_id=>"vol-80753ae9", :size=>"10", :create_time=>"2010-08-20T19:11:12.000Z", :snapshot_id=>"snap-60ef2409"}, {:availability_zone=>"us-east-1b", :attachment_set=>[], :status=>"available", :volume_id=>"vol-3cd3be55", :size=>"10", :create_time=>"2010-07-15T00:57:45.000Z", :snapshot_id=>"snap-4437822c"}], @ec2.describe_volumes('vol-80753ae9', 'vol-3cd3be55'))
  end

  def test_detach_volume
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DetachVolumeResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>4b519c5e-d4e8-465b-9f31-0853b3794962</requestId>
    <volumeId>vol-e5ec3c8b</volumeId>
    <instanceId>i-df3138b9</instanceId>
    <device>/dev/sdh</device>
    <status>detaching</status>
    <attachTime>2012-05-29T17:00:53.000Z</attachTime>
</DetachVolumeResponse>
    BODY
    prep_query body
    assert_equal({:attach_time=>"2012-05-29T17:00:53.000Z", :status=>"detaching", :volume_id=>"vol-e5ec3c8b", :instance_id=>"i-df3138b9", :device=>"/dev/sdh"}, @ec2.detach_volume('vol-e5ec3c8b', 'i-df3138b9', '/dev/sdh'))
  end

  def test_disassociate_address
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<DisassociateAddressResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>fd1517c3-1132-4f0d-aa44-cc01123f6dd4</requestId>
    <return>true</return>
</DisassociateAddressResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.disassociate_address('23.21.209.37')
  end

  def test_get_console_output
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<GetConsoleOutputResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>ff468266-f906-41f4-b3ab-74206f3fc51b</requestId>
    <instanceId>i-df3138b9</instanceId>
    <timestamp>2012-05-29T14:45:45.000Z</timestamp>
    <output></output>
</GetConsoleOutputResponse>
    BODY
    output = {:output=>"Linux version 2.6.21.7-2.fc8xen (mockbuild@xenbuilder4.fedora.phx.redhat.com) (gcc version 4.1.2 20070925 (Red Hat 4.1.2-33)) #1 SMP Fri Feb 15 12:34:28 EST 2008\n\rCommand line:  root=/dev/sda1 ro 4\n\rBIOS-provided physical RAM map:\n\r Xen: 0000000000000000 - 0000000026f00000 (usable)\n\rend_pfn_map = 159488\n\rZone PFN ranges:\n\r  DMA             0 ->   159488\n\r  DMA32      159488 ->   159488\n\r  Normal     159488 ->   159488\n\rearly_node_map[1] active PFN ranges\n\r    0:        0 ->   159488\n\rNo mptable found.\n\rPERCPU: Allocating 26496 bytes of per cpu data\n\rBuilt 1 zonelists.  Total pages: 157308\n\rKernel command line:  root=/dev/sda1 ro 4\n\rInitializing CPU#0\n\rPID hash table entries: 4096 (order: 12, 32768 bytes)\n\rXen reported: 2666.762 MHz processor.\n\rConsole: colour dummy device 80x25\n\rDentry cache hash table entries: 131072 (order: 8, 1048576 bytes)\n\rInode-cache hash table entries: 65536 (order: 7, 524288 bytes)\n\rSoftware IO TLB disabled\n\rMemory: 604028k/637952k available (2265k kernel code, 25036k reserved, 1351k data, 200k init)\n\rCalibrating delay using timer specific routine.. 5351.46 BogoMIPS (lpj=2675730)\n\rSecurity Framework v1.0.0 initialized\n\rSELinux:  Initializing.\n\rselinux_register_security:  Registering secondary module capability\n\rCapability LSM initialized as secondary\n\rMount-cache hash table entries: 256\n\rCPU: L1 I cache: 32K, L1 D cache: 32K\n\rCPU: L2 cache: 6144K\n\rCPU: Physical Processor ID: 0\n\rCPU: Processor Core ID: 1\n\rSMP alternatives: switching to UP code\n\rFreeing SMP alternatives: 28k freed\n\rBrought up 1 CPUs\n\rNET: Registered protocol family 16\n\rBrought up 1 CPUs\n\rPCI: Fatal: No config space access function found\n\rPCI: setting up Xen PCI frontend stub\n\rACPI: Interpreter disabled.\n\rLinux Plug and Play Support v0.97 (c) Adam Belay\n\rpnp: PnP ACPI: disabled\n\rxen_mem: Initialising balloon driver.\n\rusbcore: registered new interface driver usbfs\n\rusbcore: registered new interface driver hub\n\rusbcore: registered new device driver usb\n\rPCI: System does not support PCI\n\rPCI: System does not support PCI\n\rNetLabel: Initializing\n\rNetLabel:  domain hash size = 128\n\rNetLabel:  protocols = UNLABELED CIPSOv4\n\rNetLabel:  unlabeled traffic allowed by default\n\rNET: Registered protocol family 2\n\rIP route cache hash table entries: 32768 (order: 6, 262144 bytes)\n\rTCP established hash table entries: 131072 (order: 9, 3145728 bytes)\n\rTCP bind hash table entries: 65536 (order: 8, 1048576 bytes)\n\rTCP: Hash tables configured (established 131072 bind 65536)\n\rTCP reno registered\n\rchecking if image is initramfs... it is\n\rFreeing initrd memory: 7520k freed\n\raudit: initializing netlink socket (disabled)\n\raudit(1338302558.183:1): initialized\n\rVFS: Disk quotas dquot_6.5.1\n\rDquot-cache hash table entries: 512 (order 0, 4096 bytes)\n\rksign: Installing public key data\n\rLoading keyring\n\rio scheduler noop registered\n\rio scheduler anticipatory registered\n\rio scheduler deadline registered\n\rio scheduler cfq registered (default)\n\rpci_hotplug: PCI Hot Plug PCI Core version: 0.5\n\rrtc: IRQ 8 is not free.\n\rNon-volatile memory driver v1.2\n\rLinux agpgart interface v0.102 (c) Dave Jones\n\rRAMDISK driver initialized: 16 RAM disks of 16384K size 4096 blocksize\n\rinput: Macintosh mouse button emulation as /class/input/input0\n\rXen virtual console successfully installed as xvc0\n\rLinux version 2.6.21.7-2.fc8xen (mockbuild@xenbuilder4.fedora.phx.redhat.com) (gcc version 4.1.2 20070925 (Red Hat 4.1.2-33)) #1 SMP Fri Feb 15 12:34:28 EST 2008\n\rCommand line:  root=/dev/sda1 ro 4\n\rBIOS-provided physical RAM map:\n\r Xen: 0000000000000000 - 0000000026f00000 (usable)\n\rend_pfn_map = 159488\n\rZone PFN ranges:\n\r  DMA             0 ->   159488\n\r  DMA32      159488 ->   159488\n\r  Normal     159488 ->   159488\n\rearly_node_map[1] active PFN ranges\n\r    0:        0 ->   159488\n\rNo mptable found.\n\rPERCPU: Allocating 26496 bytes of per cpu data\n\rBuilt 1 zonelists.  Total pages: 157308\n\rKernel command line:  root=/dev/sda1 ro 4\n\rInitializing CPU#0\n\rPID hash table entries: 4096 (order: 12, 32768 bytes)\n\rXen reported: 2666.762 MHz processor.\n\rConsole: colour dummy device 80x25\n\rDentry cache hash table entries: 131072 (order: 8, 1048576 bytes)\n\rInode-cache hash table entries: 65536 (order: 7, 524288 bytes)\n\rSoftware IO TLB disabled\n\rMemory: 604028k/637952k available (2265k kernel code, 25036k reserved, 1351k data, 200k init)\n\rCalibrating delay using timer specific routine.. 5351.46 BogoMIPS (lpj=2675730)\n\rSecurity Framework v1.0.0 initialized\n\rSELinux:  Initializing.\n\rselinux_register_security:  Registering secondary module capability\n\rCapability LSM initialized as secondary\n\rMount-cache hash table entries: 256\n\rCPU: L1 I cache: 32K, L1 D cache: 32K\n\rCPU: L2 cache: 6144K\n\rCPU: Physical Processor ID: 0\n\rCPU: Processor Core ID: 1\n\rSMP alternatives: switching to UP code\n\rFreeing SMP alternatives: 28k freed\n\rBrought up 1 CPUs\n\rNET: Registered protocol family 16\n\rBrought up 1 CPUs\n\rPCI: Fatal: No config space access function found\n\rPCI: setting up Xen PCI frontend stub\n\rACPI: Interpreter disabled.\n\rLinux Plug and Play Support v0.97 (c) Adam Belay\n\rpnp: PnP ACPI: disabled\n\rxen_mem: Initialising balloon driver.\n\rusbcore: registered new interface driver usbfs\n\rusbcore: registered new interface driver hub\n\rusbcore: registered new device driver usb\n\rPCI: System does not support PCI\n\rPCI: System does not support PCI\n\rNetLabel: Initializing\n\rNetLabel:  domain hash size = 128\n\rNetLabel:  protocols = UNLABELED CIPSOv4\n\rNetLabel:  unlabeled traffic allowed by default\n\rNET: Registered protocol family 2\n\rIP route cache hash table entries: 32768 (order: 6, 262144 bytes)\n\rTCP established hash table entries: 131072 (order: 9, 3145728 bytes)\n\rTCP bind hash table entries: 65536 (order: 8, 1048576 bytes)\n\rTCP: Hash tables configured (established 131072 bind 65536)\n\rTCP reno registered\n\rchecking if image is initramfs... it is\n\rFreeing initrd memory: 7520k freed\n\raudit: initializing netlink socket (disabled)\n\raudit(1338302558.183:1): initialized\n\rVFS: Disk quotas dquot_6.5.1\n\rDquot-cache hash table entries: 512 (order 0, 4096 bytes)\n\rksign: Installing public key data\n\rLoading keyring\n\rio scheduler noop registered\n\rio scheduler anticipatory registered\n\rio scheduler deadline registered\n\rio scheduler cfq registered (default)\n\rpci_hotplug: PCI Hot Plug PCI Core version: 0.5\n\rrtc: IRQ 8 is not free.\n\rNon-volatile memory driver v1.2\n\rLinux agpgart interface v0.102 (c) Dave Jones\n\rRAMDISK driver initialized: 16 RAM disks of 16384K size 4096 blocksize\n\rinput: Macintosh mouse button emulation as /class/input/input0\n\rXen virtual console successfully installed as xvc0\n\rEvent-channel device installed.\n\rusbcore: registered new interface driver hiddev\n\rusbcore: registered new interface driver usbhid\n\rdrivers/usb/input/hid-core.c: v2.6:USB HID core driver\n\rPNP: No PS/2 controller found. Probing ports directly.\n\ri8042.c: No controller found.\n\rmice: PS/2 mouse device common for all mice\n\rTCP bic registered\n\rInitializing XFRM netlink socket\n\rNET: Registered protocol family 1\n\rNET: Registered protocol family 17\n\rXENBUS: Device with no driver: device/vif/0\n\rXENBUS: Device with no driver: device/vbd/2049\n\rdrivers/rtc/hctosys.c: unable to open rtc device (rtc0)\n\rFreeing unused kernel memory: 200k freed\n\rWrite protecting the kernel read-only data: 981k\n\rRed Hat nash version 6.0.19 starting\r\nMounting proc filesystem\r\nMounting sysfs filesystem\r\nCreating /dev\r\nCreating initial device nodes\r\nSetting up hotplug.\r\nCreating block device nodes.\r\nLoading xennet.ko module\r\nnetfront: Initialising virtual ethernet driver.\n\rnetfront: device eth0 has copying receive path.\n\rLoading xenblk.ko module\r\nxen-vbd: registered block device major 8\n\rLoading ehci-hcd.ko module\r\nLoading ohci-hcd.ko module\r\nLoading uhci-hcd.ko module\r\nUSB Universal Host Controller Interface driver v3.0\n\rLoading mbcache.ko module\r\nLoading jbd.ko module\r\nLoading ext3.ko module\r\nCreating root device.\r\nMounting root filesystem.\r\nkjournald starting.  Commit interval 5 seconds\n\rEXT3-fs: mounted filesystem with ordered data mode.\n\rSetting up other filesystems.\r\nSetting up new root fs\r\nno fstab.sys, mounting internal defaults\r\nSwitching to new root and running init.\r\nunmounting old /dev\r\nunmounting old /proc\r\nunmounting old /sys\r\n\rINIT: version 2.86 booting\r\r\n\t\tWelcome to  CentOS release 5.7 (Final)\r\n\t\tPress 'I' to enter interactive startup.\r\nCannot access the Hardware Clock via any known method.\r\nUse the --debug option to see the details of our search for an access method.\r\nSetting clock : Tue May 29 10:42:43 EDT 2012 [  OK  ]\r\r\nStarting udev: [  OK  ]\r\r\nSetting hostname localhost.localdomain:  [  OK  ]\r\r\nNo devices found\r\nSetting up Logical Volume Management: File descriptor 7 (/sys/kernel/hotplug) leaked on lvm.static invocation. Parent PID 207: /bin/bash\r\n  No volume groups found\r\n[  OK  ]\r\r\nChecking filesystems\r\nChecking all file systems.\r\n[/sbin/fsck.ext3 (1) -- /] fsck.ext3 -a /dev/sda1 \r\n/dev/sda1: clean, 245259/1310720 files, 1549281/2621440 blocks\r\n[  OK  ]\r\r\nRemounting root filesystem in read-write mode:  [  OK  ]\r\r\nMounting local filesystems:  mount: special device /dev/sdb does not exist\r\n[FAILED]\r\r\nEnabling /etc/fstab swaps:  [  OK  ]\r\n\rINIT: Entering runlevel: 4\r\r\nEntering non-interactive startup\r\nStarting iSCSI daemon: [  OK  ]\r[  OK  ]\r\r\n[  OK  ]\r\r\nBringing up loopback interface:  [  OK  ]\r\r\nBringing up interface eth0:  \r\nDetermining IP information for eth0... done.\r\n[  OK  ]\r\r\niscsid (pid  683) is running...\r\nSetting up iSCSI targets: iscsiadm: No records found\r\n[  OK  ]\r\r\nStarting nrpe: [  OK  ]\r\r\nStarting system message bus: [  OK  ]\r\r\nMounting other filesystems:  mount: special device /dev/sdb does not exist\r\n[FAILED]\r\r\nStarting syslog-ng: [  OK  ]\r\r\nStarting sshd: [  OK  ]\r\r\nStarting cups: [  OK  ]\r\r\nStarting ntpd: [  OK  ]\r\r\nStarting mysql:  Starting MySQL.[  OK  ]\r\r\n[  OK  ]\r\r\nStarting postfix: [FAILED]\r\r\nStarting console mouse services: [  OK  ]\r\r\nStarting crond: [  OK  ]\r\r\nStarting Munin Node: ERROR: Cannot open '/etc/munin/munin-node.conf': No such file or directory at /usr/sbin/munin-node line 73\r\n[  OK  ]\r\r\nStarting atd: [  OK  ]\r[  OK  ]\r\r\nStarting Avahi daemon... [  OK  ]\r\r\nec2-user-data: Retrieving user-data\r\nec2-user-data: No user-data available\r\nec2-extra-keys: No EXTRA_KEYS set, skipping", :timestamp=>"2012-05-29T14:45:45.000Z", :id=>"i-df3138b9"}
    prep_query body
    assert_equal output, @ec2.get_console_output('i-df3138b9')
  end

  def test_modify_image_attribute
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<ModifyImageAttributeResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>1530eec5-294a-4ca3-adef-df3a09f1572f</requestId>
    <return>true</return>
</ModifyImageAttributeResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.modify_image_attribute('ami-c8cb6ea1', 'launchPermission', 'add', { 'UserId' => '119421858375' })
  end

  def test_modify_snapshot_attribute
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<ModifySnapshotAttributeResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>6919db2f-e3f1-445c-bc5f-9488cb983629</requestId>
    <return>true</return>
</ModifySnapshotAttributeResponse>
    BODY
    prep_query body
    options = ['snap-bca001c3', 'createVolumePermission', 'add', { 'UserId' => '155565490060' }]
    assert_equal true, @ec2.modify_snapshot_attribute(*options)
  end

  def test_parse_reservation
    item = Nokogiri.XML(<<-ITEM)
            <item>
            <reservationId>r-338cb851</reservationId>
            <ownerId>155565490060</ownerId>
            <groupSet>
                <item>
                    <groupId>sg-e6d7218f</groupId>
                    <groupName>du-mysql</groupName>
                </item>
                <item>
                    <groupId>sg-33f9475b</groupId>
                    <groupName>fastdev2</groupName>
                </item>
                <item>
                    <groupId>sg-3000aa59</groupId>
                    <groupName>du-search</groupName>
                </item>
                <item>
                    <groupId>sg-4a6f8e23</groupId>
                    <groupName>staging</groupName>
                </item>
                <item>
                    <groupId>sg-34c1255d</groupId>
                    <groupName>du</groupName>
                </item>
                <item>
                    <groupId>sg-d5fe11bc</groupId>
                    <groupName>flock-managed</groupName>
                </item>
            </groupSet>
            <instancesSet>
                <item>
                    <instanceId>i-278f8241</instanceId>
                    <imageId>ami-253cf04c</imageId>
                    <instanceState>
                        <code>16</code>
                        <name>running</name>
                    </instanceState>
                    <privateDnsName>domU-12-31-39-02-65-C3.compute-1.internal</privateDnsName>
                    <dnsName>ec2-107-22-16-197.compute-1.amazonaws.com</dnsName>
                    <reason/>
                    <keyName>nytdplatform.dev</keyName>
                    <amiLaunchIndex>0</amiLaunchIndex>
                    <productCodes/>
                    <instanceType>m1.small</instanceType>
                    <launchTime>2012-05-29T02:39:10.000Z</launchTime>
                    <placement>
                        <availabilityZone>us-east-1a</availabilityZone>
                        <groupName/>
                        <tenancy>default</tenancy>
                    </placement>
                    <kernelId>aki-a71cf9ce</kernelId>
                    <ramdiskId>ari-a51cf9cc</ramdiskId>
                    <monitoring>
                        <state>disabled</state>
                    </monitoring>
                    <privateIpAddress>10.248.106.49</privateIpAddress>
                    <ipAddress>107.22.16.197</ipAddress>
                    <groupSet>
                        <item>
                            <groupId>sg-e6d7218f</groupId>
                            <groupName>du-mysql</groupName>
                        </item>
                        <item>
                            <groupId>sg-33f9475b</groupId>
                            <groupName>fastdev2</groupName>
                        </item>
                        <item>
                            <groupId>sg-3000aa59</groupId>
                            <groupName>du-search</groupName>
                        </item>
                        <item>
                            <groupId>sg-4a6f8e23</groupId>
                            <groupName>staging</groupName>
                        </item>
                        <item>
                            <groupId>sg-34c1255d</groupId>
                            <groupName>du</groupName>
                        </item>
                        <item>
                            <groupId>sg-d5fe11bc</groupId>
                            <groupName>flock-managed</groupName>
                        </item>
                    </groupSet>
                    <architecture>i386</architecture>
                    <rootDeviceType>ebs</rootDeviceType>
                    <rootDeviceName>/dev/sda1</rootDeviceName>
                    <blockDeviceMapping>
                        <item>
                            <deviceName>/dev/sda1</deviceName>
                            <ebs>
                                <volumeId>vol-8de83fe3</volumeId>
                                <status>attached</status>
                                <attachTime>2012-05-29T02:39:49.000Z</attachTime>
                                <deleteOnTermination>true</deleteOnTermination>
                            </ebs>
                        </item>
                        <item>
                            <deviceName>/dev/sdx1</deviceName>
                            <ebs>
                                <volumeId>vol-3516c15b</volumeId>
                                <status>attached</status>
                                <attachTime>2012-05-29T02:58:42.000Z</attachTime>
                                <deleteOnTermination>false</deleteOnTermination>
                            </ebs>
                        </item>
                    </blockDeviceMapping>
                    <virtualizationType>paravirtual</virtualizationType>
                    <clientToken/>
                    <hypervisor>xen</hypervisor>
                </item>
            </instancesSet>
        </item>
    ITEM
    reservation = {
      :instances=>
      [{:monitoring=>"disabled",
        :type=>"m1.small",
        :index=>"0",
        :root_device_type=>"ebs",
        :key_name=>"nytdplatform.dev",
        :state=>"running",
        :root_device_name=>"/dev/sda1",
        :product_codes=>[],
        :reason=>"",
        :launch_time=>"2012-05-29T02:39:10.000Z",
        :private_ip=>"10.248.106.49",
        :image_id=>"ami-253cf04c",
        :kernel_id=>"aki-a71cf9ce",
        :public_ip=>"107.22.16.197",
        :private_dns=>"domU-12-31-39-02-65-C3.compute-1.internal",
        :ramdisk_id=>"ari-a51cf9cc",
        :zone=>"us-east-1a",
        :id=>"i-278f8241",
        :architecture=>"i386",
        :public_dns=>"ec2-107-22-16-197.compute-1.amazonaws.com"}],
        :groups=>
      ["sg-e6d7218f",
        "sg-33f9475b",
        "sg-3000aa59",
        "sg-4a6f8e23",
        "sg-34c1255d",
        "sg-d5fe11bc",
        "sg-e6d7218f",
        "sg-33f9475b",
        "sg-3000aa59",
        "sg-4a6f8e23",
        "sg-34c1255d",
        "sg-d5fe11bc"],
        :reservation_id=>"r-338cb851",
        :owner_id=>"155565490060"
    }
    assert_equal reservation, @ec2.parse_reservation(item)
  end

  def test_parse_reserved_instance
    item = Nokogiri.XML(<<-ITEM)
        <item>
            <reservedInstancesId>b847fa93-b2bb-4e3b-9ffe-5267bc29e5e8</reservedInstancesId>
            <instanceType>m1.small</instanceType>
            <availabilityZone>us-east-1a</availabilityZone>
            <start>2009-12-22T16:30:40.975Z</start>
            <duration>94608000</duration>
            <fixedPrice>350.0</fixedPrice>
            <usagePrice>0.03</usagePrice>
            <instanceCount>8</instanceCount>
            <productDescription>Linux/UNIX</productDescription>
            <state>active</state>
            <instanceTenancy>default</instanceTenancy>
            <currencyCode>USD</currencyCode>
       </item>
    ITEM
    parsed_item = {
      :duration              => "94608000",
      :fixed_price           => "350.0",
      :count                 => "8",
      :usage_price           => "0.03",
      :state                 => "active",
      :start                 => "2009-12-22T16:30:40.975Z",
      :reserved_instances_id => "b847fa93-b2bb-4e3b-9ffe-5267bc29e5e8",
      :zone                  => "us-east-1a",
      :instance_type         => "m1.small",
      :description           => "Linux/UNIX"
    }
    assert_equal parsed_item, @ec2.parse_reserved_instance(item)
  end

  def test_parse_volume
    item = Nokogiri.XML(<<-BODY)
      <item>
         <volumeId>vol-3cd3be55</volumeId>
         <size>10</size>
         <snapshotId>snap-4437822c</snapshotId>
         <availabilityZone>us-east-1b</availabilityZone>
         <status>available</status>
         <createTime>2010-07-15T00:57:45.000Z</createTime>
         <attachmentSet/>
      </item>
    BODY
    assert_equal({:snapshot_id=>"snap-4437822c",
                 :availability_zone=>"us-east-1b",
                 :status=>"available",
                 :attachment_set=>[],
                 :size=>"10",
                 :volume_id=>"vol-3cd3be55",
                 :create_time=>"2010-07-15T00:57:45.000Z"}, @ec2.parse_volume(item))
  end

  def test_reboot_instances
    body = <<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<RebootInstancesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>995ef258-8a3f-43a9-9fdd-60cf2909735e</requestId>
    <return>true</return>
</RebootInstancesResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.reboot_instances('i-df3138b9', 'i-07363f61')
  end

  def test_register_image
    options = {
      :name                 => 'test',
      :description          => 'test',
      :architecture         => 'test',
      :kernel_id            => 'test',
      :ramdisk_id           => 'test',
      :root_device_name     => 'test',
      :block_device_mapping => { },
    }
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<RegisterImageResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>b8bbe127-5499-4912-be73-2b4185e8a6f1</requestId>
    <imageId>ami-e0e84989</imageId>
</RegisterImageResponse>
    BODY
    prep_query body
    assert_equal 'ami-e0e84989', @ec2.register_image('', options)
  end

  def test_release_address
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<ReleaseAddressResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>edc3b3e4-1bd0-43af-a524-1c7d534f749d</requestId>
    <return>true</return>
</ReleaseAddressResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.release_address('23.21.157.226')
  end

  def test_reset_image_attribute
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<ResetImageAttributeResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>a58b7a66-4c8f-4ffc-9a86-568b0d0008c0</requestId>
    <return>true</return>
</ResetImageAttributeResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.reset_image_attribute('ami-c8cb6ea1', 'launchPermission')
  end

  def test_revoke_ingress_by_cidr
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<RevokeSecurityGroupIngressResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>3867b9d8-bc82-4d05-9fcd-dc7cfaa8fe48</requestId>
    <return>true</return>
</RevokeSecurityGroupIngressResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.revoke_ingress_by_cidr('test', 'tcp', '80')
  end

  def test_revoke_ingress_by_group
    body =<<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<RevokeSecurityGroupIngressResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>0f1d07ab-e7bc-418e-83e6-ff194b722d55</requestId>
    <return>true</return>
</RevokeSecurityGroupIngressResponse>
    BODY
    prep_query body
    assert_equal true, @ec2.revoke_ingress_by_group('test', 'test', '12345')
  end

  def test_run_instances
    params = {
      :key_name        => 'test',
      :instance_type   => 'test',
      :user_data       => 'test',
      :zone            => 'test',
      :kernel_id       => 'test',
      :ramdisk_id      => 'test',
      :security_groups => 'test'
    }
    body = <<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<RunInstancesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>7682c334-ec11-48cc-a259-4c684e072012</requestId>
    <reservationId>r-d7f6c7b5</reservationId>
    <ownerId>119421858375</ownerId>
    <groupSet>
        <item>
            <groupId>sg-8b01e4e2</groupId>
            <groupName>default</groupName>
        </item>
    </groupSet>
    <instancesSet>
        <item>
            <instanceId>i-df3138b9</instanceId>
            <imageId>ami-d7eb25be</imageId>
            <instanceState>
                <code>0</code>
                <name>pending</name>
            </instanceState>
            <privateDnsName/>
            <dnsName/>
            <reason/>
            <keyName>nytd.clienttech.dev</keyName>
            <amiLaunchIndex>0</amiLaunchIndex>
            <productCodes/>
            <instanceType>t1.micro</instanceType>
            <launchTime>2012-05-29T14:25:05.000Z</launchTime>
            <placement>
                <availabilityZone>us-east-1a</availabilityZone>
                <groupName/>
                <tenancy>default</tenancy>
            </placement>
            <kernelId>aki-b51cf9dc</kernelId>
            <ramdiskId>ari-b31cf9da</ramdiskId>
            <monitoring>
                <state>disabled</state>
            </monitoring>
            <groupSet>
                <item>
                    <groupId>sg-8b01e4e2</groupId>
                    <groupName>default</groupName>
                </item>
            </groupSet>
            <stateReason>
                <code>pending</code>
                <message>pending</message>
            </stateReason>
            <architecture>x86_64</architecture>
            <rootDeviceType>ebs</rootDeviceType>
            <rootDeviceName>/dev/sda1</rootDeviceName>
            <blockDeviceMapping/>
            <virtualizationType>paravirtual</virtualizationType>
            <clientToken/>
            <hypervisor>xen</hypervisor>
        </item>
    </instancesSet>
</RunInstancesResponse>
    BODY
    prep_query body
    response = {:reservation_id=>"r-d7f6c7b5", :groups=>["sg-8b01e4e2", "sg-8b01e4e2"], :owner_id=>"119421858375", :instances=>[{:root_device_name=>"/dev/sda1", :type=>"t1.micro", :product_codes=>[], :index=>"0", :launch_time=>"2012-05-29T14:25:05.000Z", :image_id=>"ami-d7eb25be", :kernel_id=>"aki-b51cf9dc", :reason=>"", :private_dns=>"", :state=>"pending", :ramdisk_id=>"ari-b31cf9da", :architecture=>"x86_64", :public_dns=>"", :monitoring=>"disabled", :root_device_type=>"ebs", :zone=>"us-east-1a", :key_name=>"nytd.clienttech.dev", :id=>"i-df3138b9"}]}

    assert_equal response, @ec2.run_instances('test', 1, 1, params)
  end

  def test_start_instances
    body = <<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<StartInstancesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>e2335d84-d58c-4080-9fb0-ef90b5355059</requestId>
    <instancesSet>
        <item>
            <instanceId>i-07363f61</instanceId>
            <currentState>
                <code>0</code>
                <name>pending</name>
            </currentState>
            <previousState>
                <code>80</code>
                <name>stopped</name>
            </previousState>
        </item>
    </instancesSet>
</StartInstancesResponse>
    BODY
    prep_query body
    assert_equal [{:previous_state=>"stopped", :state=>"pending", :id=>"i-07363f61"}] , @ec2.start_instances('i-07363f61')
  end

  def test_stop_instances
    body = <<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
<StopInstancesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
    <requestId>88d5e098-2078-4310-b709-6c1f34636b7b</requestId>
    <instancesSet>
        <item>
            <instanceId>i-07363f61</instanceId>
            <currentState>
                <code>64</code>
                <name>stopping</name>
            </currentState>
            <previousState>
                <code>16</code>
                <name>running</name>
            </previousState>
        </item>
    </instancesSet>
</StopInstancesResponse>
    BODY
    prep_query body
    assert_equal [{:previous_state=>"running", :state=>"stopping", :id=>"i-07363f61"}], @ec2.stop_instances('i-07363f61')
  end

  def test_terminate_instances
    body = <<-BODY
    <?xml version='1.0' encoding='UTF-8'?>
    <TerminateInstancesResponse xmlns='http://ec2.amazonaws.com/doc/2011-05-15/'>
        <requestId>9b32a41a-ecc3-467b-a769-657a3833b838</requestId>
        <instancesSet>
            <item>
                <instanceId>i-testing</instanceId>
                <currentState>
                    <code>48</code>
                    <name>terminated</name>
                </currentState>
                <previousState>
                    <code>80</code>
                    <name>stopped</name>
                </previousState>
            </item>
        </instancesSet>
    </TerminateInstancesResponse>
    BODY
    prep_query body
    assert_equal [{:previous_state=>"stopped", :state=>"terminated", :id=>"i-testing"}], @ec2.terminate_instances('i-testing')
  end

  private

  def response_object body, code='200', status='OK', headers={}
    headers ||= {
      'server'            => 'AmazonEC2',
      'date'              => 'Fri, 25 May 2012 16:16:59 GMT',
      'transfer-encoding' => 'chunked',
      'content-type'      => 'text/xml;charset=UTF-8'
    }

    stub(o = Object.new)
    stub(o).body { body }
    stub(o).code { code }
    stub(o).status { status }
    stub(o).headers { headers }
  end

  def prep_query response=response_object
    any_instance_of(EC2) { |ec2|
      stub(ec2).do_query {
        response = response.is_a?(String) ? response_object(response) : response
      }
    }
  end

end

# Number of errors detected: 47
