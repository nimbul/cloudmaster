# Code Generated by ZenTest v. 4.8.0
#                 classname: asrt / meth =  ratio%
#         AWS::ServiceError:    0 /   16 =   0.00%
#                       AWS:    0 /    1 =   0.00%

require 'test/unit/testcase'
require 'test/unit' if $0 == __FILE__

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'OriginalAWS'))
require 'OriginalAWS/AWS'

class TestAws < Test::Unit::TestCase; end

class TestAws::TestServiceError < Test::Unit::TestCase
  def setup
    @error = AWS::ServiceError.new mock_error_response
  end

  def teardown
    @error = nil
  end

  def test_aws_error_xml
    assert @error.aws_error_xml.to_s, mock_error_response.body
  end

  def test_aws_error_xml_equals
    @error.aws_error_xml = '<XML />'
    assert @error.aws_error_xml, '<XML />'
  end

  def test_response
    assert @error.response, mock_error_response
  end

  def test_response_equals
    @error.response = 'test'
    assert @error.response == 'test'
  end

  private
  def mock_error_response
    mock(o = Object.new)
    mock(o).code.any_times { '400' }
    mock(o).message.any_times { 'Bad Request' }
    mock(o).headers.any_times { [
      ['connection']['close'],
      ['content-type']['application/xml'],
      ['server']['AmazonS3'],
      ['x-amz-id-2']['ZxyX5379EfNgYOSTuwXWhMn0fspj2BIfEWuS+PPtoeS2wUrekPCtChDNh+LeJdmJ'],
      ['transfer-encoding']['chunked'],
      ['date']['Thu, 24 May 2012 15:35:54 GMT'],
      ['x-amz-request-id']['4F421D6B6B2A8D72'],
    ] }
    mock(o).body.any_times {<<-BODY
<?xml version='1.0' encoding='UTF-8'?>
<Error><Code>InvalidLocationConstraint</Code><Message>The specified location-constraint is not valid</Message><LocationConstraint>asdsd</LocationConstraint><RequestId>4F421D6B6B2A8D72</RequestId><HostId>ZxyX5379EfNgYOSTuwXWhMn0fspj2BIfEWuS+PPtoeS2wUrekPCtChDNh+LeJdmJ</HostId></Error>
    BODY
    }
    o
  end
end
